{"remainingRequest":"/Users/zacharycrowell/Desktop/video-chat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zacharycrowell/Desktop/video-chat/src/components/Video.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zacharycrowell/Desktop/video-chat/src/components/Video.vue","mtime":1567610053536},{"path":"/Users/zacharycrowell/Desktop/video-chat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zacharycrowell/Desktop/video-chat/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zacharycrowell/Desktop/video-chat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zacharycrowell/Desktop/video-chat/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { EventBus } from '../Event'\nimport Twilio, { connect, createLocalTracks, createLocalVideoTrack } from 'twilio-video'\nimport axios from 'axios'\nexport default {\n name: \"Video\",\n data() {\n   return {\n     loading: false,\n     data: {},\n     localTrack: false,\n     remoteTrack: '',\n     activeRoom: '',\n     previewTracks: '',\n     identity: '',\n     roomName: null,\n   }\n },\n props: ['username'], // props that will be passed to this component\n created() {\n          EventBus.$on('show_room', (room_name) => {\n         this.createChat(room_name);\n     })\n\n   // When a user is about to transition away from this page, \n   // disconnect from the room, if joined.\n   window.addEventListener('beforeunload', this.leaveRoomIfJoined);\n },\n  methods: {\n    async getAccessToken() {\n      return await axios.get(`http://localhost:3000/token?identity=${this.username}`);\n    },\n    // Trigger log events \n   dispatchLog(message) {\n       EventBus.$emit('new_log', message);\n   },\n    // Attach the Tracks to the DOM.\n   attachTracks(tracks, container) {\n       tracks.forEach(function(track) {\n           container.appendChild(track.attach());\n       });\n   },\n      // Attach the Participant's Tracks to the DOM.\n   attachParticipantTracks(participant, container) {\n       let tracks = Array.from(participant.tracks.values());\n       this.attachTracks(tracks, container);\n   },\n      // Detach the Tracks from the DOM.\n   detachTracks(tracks) {\n       tracks.forEach( (track) => {\n           track.detach().forEach((detachedElement) => {\n              detachedElement.remove();\n           });\n       });\n   },\n      // Detach the Participant's Tracks from the DOM.\n   detachParticipantTracks(participant) {\n       let tracks = Array.from(participant.tracks.values());\n       this.detachTracks(tracks);\n   },\n      // Leave Room.\n   leaveRoomIfJoined() {\n       if (this.activeRoom) {\n           this.activeRoom.disconnect();\n       }\n   },\n    createChat(room_name) {\n      this.loading = true;\n      const VueThis = this;\n      this.getAccessToken().then( (data) => {\n          VueThis.roomName = null;\n          const token = data.data.token;\n          let connectOptions = {\n              name: room_name,\n              // logLevel: 'debug',\n              audio: true,\n              video: { width: 400 }\n          };\n          // before a user enters a new room,\n          // disconnect the user from they joined already\n          this.leaveRoomIfJoined();\n        \n          // remove any remote track when joining a new room\n          document.getElementById('remoteTrack').innerHTML = \"\";\n          Twilio.connect(token , connectOptions).then(function(room) {\n              // console.log('Successfully joined a Room: ', room);\n              VueThis.dispatchLog('Successfully joined a Room: '+ room_name);\n              // set active toom\n              VueThis.activeRoom = room;\n              VueThis.roomName = room_name;\n              VueThis.loading = false;\n              // Attach the Tracks of the Room's Participants.\n               room.participants.forEach(function(participant) {\n                   let previewContainer = document.getElementById('remoteTrack');\n                   VueThis.attachParticipantTracks(participant, previewContainer);\n               });\n               // When a Participant joins the Room, log the event.\n               room.on('participantConnected', function(participant) {\n                   VueThis.dispatchLog(\"Joining: '\" + participant.identity + \"'\");\n               });\n               // When a Participant adds a Track, attach it to the DOM.\n               room.on('trackAdded', function(track, participant) {\n                   VueThis.dispatchLog(participant.identity + \" added track: \" + track.kind);\n                   let previewContainer = document.getElementById('remoteTrack');\n                   VueThis.attachTracks([track], previewContainer);\n               });\n               // When a Participant removes a Track, detach it from the DOM.\n               room.on('trackRemoved', function(track, participant) {\n                   VueThis.dispatchLog(participant.identity + \" removed track: \" + track.kind);\n                   VueThis.detachTracks([track]);\n               });\n                              // When a Participant leaves the Room, detach its Tracks.\n               room.on('participantDisconnected', function(participant) {\n                   VueThis.dispatchLog(\"Participant '\" + participant.identity + \"' left the room\");\n                   VueThis.detachParticipantTracks(participant);\n               });\n                // if local preview is not active, create it\n               if(!VueThis.localTrack) {\n                   createLocalVideoTrack().then(track => {\n                     let localMediaContainer = document.getElementById('localTrack');\n                     localMediaContainer.appendChild(track.attach());\n                     VueThis.localTrack = true;\n                   });\n               }\n         });\n      })\n   },\n   }\n}\n",{"version":3,"sources":["Video.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Video.vue","sourceRoot":"src/components","sourcesContent":["<template>\n   <div class=\"col-md-6 box\">\n       <div class=\"roomTitle\">\n           <span v-if=\"loading\"> Loading... {{roomName}}</span>\n           <span v-else-if=\"!loading && roomName\"> Connected to {{roomName}}</span>\n           <span v-else>Select a room to get started</span>\n       </div>\n       <div class=\"row remote_video_container\">\n           <div id=\"remoteTrack\"></div>\n       </div>\n       <div class=\"spacing\"></div>\n       <div class=\"row\">\n           <div id=\"localTrack\"></div>\n       </div>\n   </div>\n</template>\n\n<script>\nimport { EventBus } from '../Event'\nimport Twilio, { connect, createLocalTracks, createLocalVideoTrack } from 'twilio-video'\nimport axios from 'axios'\nexport default {\n name: \"Video\",\n data() {\n   return {\n     loading: false,\n     data: {},\n     localTrack: false,\n     remoteTrack: '',\n     activeRoom: '',\n     previewTracks: '',\n     identity: '',\n     roomName: null,\n   }\n },\n props: ['username'], // props that will be passed to this component\n created() {\n          EventBus.$on('show_room', (room_name) => {\n         this.createChat(room_name);\n     })\n\n   // When a user is about to transition away from this page, \n   // disconnect from the room, if joined.\n   window.addEventListener('beforeunload', this.leaveRoomIfJoined);\n },\n  methods: {\n    async getAccessToken() {\n      return await axios.get(`http://localhost:3000/token?identity=${this.username}`);\n    },\n    // Trigger log events \n   dispatchLog(message) {\n       EventBus.$emit('new_log', message);\n   },\n    // Attach the Tracks to the DOM.\n   attachTracks(tracks, container) {\n       tracks.forEach(function(track) {\n           container.appendChild(track.attach());\n       });\n   },\n      // Attach the Participant's Tracks to the DOM.\n   attachParticipantTracks(participant, container) {\n       let tracks = Array.from(participant.tracks.values());\n       this.attachTracks(tracks, container);\n   },\n      // Detach the Tracks from the DOM.\n   detachTracks(tracks) {\n       tracks.forEach( (track) => {\n           track.detach().forEach((detachedElement) => {\n              detachedElement.remove();\n           });\n       });\n   },\n      // Detach the Participant's Tracks from the DOM.\n   detachParticipantTracks(participant) {\n       let tracks = Array.from(participant.tracks.values());\n       this.detachTracks(tracks);\n   },\n      // Leave Room.\n   leaveRoomIfJoined() {\n       if (this.activeRoom) {\n           this.activeRoom.disconnect();\n       }\n   },\n    createChat(room_name) {\n      this.loading = true;\n      const VueThis = this;\n      this.getAccessToken().then( (data) => {\n          VueThis.roomName = null;\n          const token = data.data.token;\n          let connectOptions = {\n              name: room_name,\n              // logLevel: 'debug',\n              audio: true,\n              video: { width: 400 }\n          };\n          // before a user enters a new room,\n          // disconnect the user from they joined already\n          this.leaveRoomIfJoined();\n        \n          // remove any remote track when joining a new room\n          document.getElementById('remoteTrack').innerHTML = \"\";\n          Twilio.connect(token , connectOptions).then(function(room) {\n              // console.log('Successfully joined a Room: ', room);\n              VueThis.dispatchLog('Successfully joined a Room: '+ room_name);\n              // set active toom\n              VueThis.activeRoom = room;\n              VueThis.roomName = room_name;\n              VueThis.loading = false;\n              // Attach the Tracks of the Room's Participants.\n               room.participants.forEach(function(participant) {\n                   let previewContainer = document.getElementById('remoteTrack');\n                   VueThis.attachParticipantTracks(participant, previewContainer);\n               });\n               // When a Participant joins the Room, log the event.\n               room.on('participantConnected', function(participant) {\n                   VueThis.dispatchLog(\"Joining: '\" + participant.identity + \"'\");\n               });\n               // When a Participant adds a Track, attach it to the DOM.\n               room.on('trackAdded', function(track, participant) {\n                   VueThis.dispatchLog(participant.identity + \" added track: \" + track.kind);\n                   let previewContainer = document.getElementById('remoteTrack');\n                   VueThis.attachTracks([track], previewContainer);\n               });\n               // When a Participant removes a Track, detach it from the DOM.\n               room.on('trackRemoved', function(track, participant) {\n                   VueThis.dispatchLog(participant.identity + \" removed track: \" + track.kind);\n                   VueThis.detachTracks([track]);\n               });\n                              // When a Participant leaves the Room, detach its Tracks.\n               room.on('participantDisconnected', function(participant) {\n                   VueThis.dispatchLog(\"Participant '\" + participant.identity + \"' left the room\");\n                   VueThis.detachParticipantTracks(participant);\n               });\n                // if local preview is not active, create it\n               if(!VueThis.localTrack) {\n                   createLocalVideoTrack().then(track => {\n                     let localMediaContainer = document.getElementById('localTrack');\n                     localMediaContainer.appendChild(track.attach());\n                     VueThis.localTrack = true;\n                   });\n               }\n         });\n      })\n   },\n   }\n}\n</script>\n\n<style >\n   .remote_video_container {\n     left: 0;\n     margin: 0;\n     border: 1px solid rgb(124, 129, 124);\n   }\n   #localTrack video {\n       border: 3px solid rgb(124, 129, 124);\n       margin: 0px;\n       max-width: 50% !important;\n       background-repeat: no-repeat;\n   }\n   .spacing {\n     padding: 20px;\n     width: 100%;\n   }\n   .roomTitle {\n       border: 1px solid rgb(124, 129, 124);\n       padding: 4px;\n       color: dodgerblue;\n   }\n</style>"]}]}