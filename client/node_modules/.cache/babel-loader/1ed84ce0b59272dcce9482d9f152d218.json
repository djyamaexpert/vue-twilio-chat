{"remainingRequest":"/Users/zacharycrowell/Desktop/video-chat/node_modules/babel-loader/lib/index.js!/Users/zacharycrowell/Desktop/video-chat/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zacharycrowell/Desktop/video-chat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zacharycrowell/Desktop/video-chat/src/components/Video.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zacharycrowell/Desktop/video-chat/src/components/Video.vue","mtime":1567610053536},{"path":"/Users/zacharycrowell/Desktop/video-chat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zacharycrowell/Desktop/video-chat/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zacharycrowell/Desktop/video-chat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zacharycrowell/Desktop/video-chat/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/zacharycrowell/Desktop/video-chat/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { EventBus } from \"../Event\";\nimport Twilio, { connect, createLocalTracks, createLocalVideoTrack } from 'twilio-video';\nimport axios from 'axios';\nexport default {\n  name: \"Video\",\n  data: function data() {\n    return {\n      loading: false,\n      data: {},\n      localTrack: false,\n      remoteTrack: '',\n      activeRoom: '',\n      previewTracks: '',\n      identity: '',\n      roomName: null\n    };\n  },\n  props: ['username'],\n  // props that will be passed to this component\n  created: function created() {\n    var _this = this;\n\n    EventBus.$on('show_room', function (room_name) {\n      _this.createChat(room_name);\n    }); // When a user is about to transition away from this page, \n    // disconnect from the room, if joined.\n\n    window.addEventListener('beforeunload', this.leaveRoomIfJoined);\n  },\n  methods: {\n    getAccessToken: function () {\n      var _getAccessToken = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get(\"http://localhost:3000/token?identity=\".concat(this.username));\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getAccessToken() {\n        return _getAccessToken.apply(this, arguments);\n      }\n\n      return getAccessToken;\n    }(),\n    // Trigger log events \n    dispatchLog: function dispatchLog(message) {\n      EventBus.$emit('new_log', message);\n    },\n    // Attach the Tracks to the DOM.\n    attachTracks: function attachTracks(tracks, container) {\n      tracks.forEach(function (track) {\n        container.appendChild(track.attach());\n      });\n    },\n    // Attach the Participant's Tracks to the DOM.\n    attachParticipantTracks: function attachParticipantTracks(participant, container) {\n      var tracks = Array.from(participant.tracks.values());\n      this.attachTracks(tracks, container);\n    },\n    // Detach the Tracks from the DOM.\n    detachTracks: function detachTracks(tracks) {\n      tracks.forEach(function (track) {\n        track.detach().forEach(function (detachedElement) {\n          detachedElement.remove();\n        });\n      });\n    },\n    // Detach the Participant's Tracks from the DOM.\n    detachParticipantTracks: function detachParticipantTracks(participant) {\n      var tracks = Array.from(participant.tracks.values());\n      this.detachTracks(tracks);\n    },\n    // Leave Room.\n    leaveRoomIfJoined: function leaveRoomIfJoined() {\n      if (this.activeRoom) {\n        this.activeRoom.disconnect();\n      }\n    },\n    createChat: function createChat(room_name) {\n      var _this2 = this;\n\n      this.loading = true;\n      var VueThis = this;\n      this.getAccessToken().then(function (data) {\n        VueThis.roomName = null;\n        var token = data.data.token;\n        var connectOptions = {\n          name: room_name,\n          // logLevel: 'debug',\n          audio: true,\n          video: {\n            width: 400\n          }\n        }; // before a user enters a new room,\n        // disconnect the user from they joined already\n\n        _this2.leaveRoomIfJoined(); // remove any remote track when joining a new room\n\n\n        document.getElementById('remoteTrack').innerHTML = \"\";\n        Twilio.connect(token, connectOptions).then(function (room) {\n          // console.log('Successfully joined a Room: ', room);\n          VueThis.dispatchLog('Successfully joined a Room: ' + room_name); // set active toom\n\n          VueThis.activeRoom = room;\n          VueThis.roomName = room_name;\n          VueThis.loading = false; // Attach the Tracks of the Room's Participants.\n\n          room.participants.forEach(function (participant) {\n            var previewContainer = document.getElementById('remoteTrack');\n            VueThis.attachParticipantTracks(participant, previewContainer);\n          }); // When a Participant joins the Room, log the event.\n\n          room.on('participantConnected', function (participant) {\n            VueThis.dispatchLog(\"Joining: '\" + participant.identity + \"'\");\n          }); // When a Participant adds a Track, attach it to the DOM.\n\n          room.on('trackAdded', function (track, participant) {\n            VueThis.dispatchLog(participant.identity + \" added track: \" + track.kind);\n            var previewContainer = document.getElementById('remoteTrack');\n            VueThis.attachTracks([track], previewContainer);\n          }); // When a Participant removes a Track, detach it from the DOM.\n\n          room.on('trackRemoved', function (track, participant) {\n            VueThis.dispatchLog(participant.identity + \" removed track: \" + track.kind);\n            VueThis.detachTracks([track]);\n          }); // When a Participant leaves the Room, detach its Tracks.\n\n          room.on('participantDisconnected', function (participant) {\n            VueThis.dispatchLog(\"Participant '\" + participant.identity + \"' left the room\");\n            VueThis.detachParticipantTracks(participant);\n          }); // if local preview is not active, create it\n\n          if (!VueThis.localTrack) {\n            createLocalVideoTrack().then(function (track) {\n              var localMediaContainer = document.getElementById('localTrack');\n              localMediaContainer.appendChild(track.attach());\n              VueThis.localTrack = true;\n            });\n          }\n        });\n      });\n    }\n  }\n};",{"version":3,"sources":["Video.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n   <div class=\"col-md-6 box\">\n       <div class=\"roomTitle\">\n           <span v-if=\"loading\"> Loading... {{roomName}}</span>\n           <span v-else-if=\"!loading && roomName\"> Connected to {{roomName}}</span>\n           <span v-else>Select a room to get started</span>\n       </div>\n       <div class=\"row remote_video_container\">\n           <div id=\"remoteTrack\"></div>\n       </div>\n       <div class=\"spacing\"></div>\n       <div class=\"row\">\n           <div id=\"localTrack\"></div>\n       </div>\n   </div>\n</template>\n\n<script>\nimport { EventBus } from '../Event'\nimport Twilio, { connect, createLocalTracks, createLocalVideoTrack } from 'twilio-video'\nimport axios from 'axios'\nexport default {\n name: \"Video\",\n data() {\n   return {\n     loading: false,\n     data: {},\n     localTrack: false,\n     remoteTrack: '',\n     activeRoom: '',\n     previewTracks: '',\n     identity: '',\n     roomName: null,\n   }\n },\n props: ['username'], // props that will be passed to this component\n created() {\n          EventBus.$on('show_room', (room_name) => {\n         this.createChat(room_name);\n     })\n\n   // When a user is about to transition away from this page, \n   // disconnect from the room, if joined.\n   window.addEventListener('beforeunload', this.leaveRoomIfJoined);\n },\n  methods: {\n    async getAccessToken() {\n      return await axios.get(`http://localhost:3000/token?identity=${this.username}`);\n    },\n    // Trigger log events \n   dispatchLog(message) {\n       EventBus.$emit('new_log', message);\n   },\n    // Attach the Tracks to the DOM.\n   attachTracks(tracks, container) {\n       tracks.forEach(function(track) {\n           container.appendChild(track.attach());\n       });\n   },\n      // Attach the Participant's Tracks to the DOM.\n   attachParticipantTracks(participant, container) {\n       let tracks = Array.from(participant.tracks.values());\n       this.attachTracks(tracks, container);\n   },\n      // Detach the Tracks from the DOM.\n   detachTracks(tracks) {\n       tracks.forEach( (track) => {\n           track.detach().forEach((detachedElement) => {\n              detachedElement.remove();\n           });\n       });\n   },\n      // Detach the Participant's Tracks from the DOM.\n   detachParticipantTracks(participant) {\n       let tracks = Array.from(participant.tracks.values());\n       this.detachTracks(tracks);\n   },\n      // Leave Room.\n   leaveRoomIfJoined() {\n       if (this.activeRoom) {\n           this.activeRoom.disconnect();\n       }\n   },\n    createChat(room_name) {\n      this.loading = true;\n      const VueThis = this;\n      this.getAccessToken().then( (data) => {\n          VueThis.roomName = null;\n          const token = data.data.token;\n          let connectOptions = {\n              name: room_name,\n              // logLevel: 'debug',\n              audio: true,\n              video: { width: 400 }\n          };\n          // before a user enters a new room,\n          // disconnect the user from they joined already\n          this.leaveRoomIfJoined();\n        \n          // remove any remote track when joining a new room\n          document.getElementById('remoteTrack').innerHTML = \"\";\n          Twilio.connect(token , connectOptions).then(function(room) {\n              // console.log('Successfully joined a Room: ', room);\n              VueThis.dispatchLog('Successfully joined a Room: '+ room_name);\n              // set active toom\n              VueThis.activeRoom = room;\n              VueThis.roomName = room_name;\n              VueThis.loading = false;\n              // Attach the Tracks of the Room's Participants.\n               room.participants.forEach(function(participant) {\n                   let previewContainer = document.getElementById('remoteTrack');\n                   VueThis.attachParticipantTracks(participant, previewContainer);\n               });\n               // When a Participant joins the Room, log the event.\n               room.on('participantConnected', function(participant) {\n                   VueThis.dispatchLog(\"Joining: '\" + participant.identity + \"'\");\n               });\n               // When a Participant adds a Track, attach it to the DOM.\n               room.on('trackAdded', function(track, participant) {\n                   VueThis.dispatchLog(participant.identity + \" added track: \" + track.kind);\n                   let previewContainer = document.getElementById('remoteTrack');\n                   VueThis.attachTracks([track], previewContainer);\n               });\n               // When a Participant removes a Track, detach it from the DOM.\n               room.on('trackRemoved', function(track, participant) {\n                   VueThis.dispatchLog(participant.identity + \" removed track: \" + track.kind);\n                   VueThis.detachTracks([track]);\n               });\n                              // When a Participant leaves the Room, detach its Tracks.\n               room.on('participantDisconnected', function(participant) {\n                   VueThis.dispatchLog(\"Participant '\" + participant.identity + \"' left the room\");\n                   VueThis.detachParticipantTracks(participant);\n               });\n                // if local preview is not active, create it\n               if(!VueThis.localTrack) {\n                   createLocalVideoTrack().then(track => {\n                     let localMediaContainer = document.getElementById('localTrack');\n                     localMediaContainer.appendChild(track.attach());\n                     VueThis.localTrack = true;\n                   });\n               }\n         });\n      })\n   },\n   }\n}\n</script>\n\n<style >\n   .remote_video_container {\n     left: 0;\n     margin: 0;\n     border: 1px solid rgb(124, 129, 124);\n   }\n   #localTrack video {\n       border: 3px solid rgb(124, 129, 124);\n       margin: 0px;\n       max-width: 50% !important;\n       background-repeat: no-repeat;\n   }\n   .spacing {\n     padding: 20px;\n     width: 100%;\n   }\n   .roomTitle {\n       border: 1px solid rgb(124, 129, 124);\n       padding: 4px;\n       color: dodgerblue;\n   }\n</style>"],"sourceRoot":"src/components"}]}